/**
 * アクション登録
 *
 * @module routes/index
 * @author Y.Akamatsu
 */

// 環境設定を実行する。
var context = require('../utils/context');

// 画面を表示する。
exports.index = function (req, res) {
    res.render('index', {'response': context.initResponse.response, 'context': JSON.stringify(context.initResponse.context)});
};

/**
 * STT トークンを返す。
 */
exports.sttToken = function (req, res) {
    context.sttAuth.getToken(function (err, token) {
        if (err) {
            console.log('Error retrieving token: ', err);
            res.status(500).send('Error retrieving token');
        } else {
            res.send(token);
        }
    });
};

/**
 * TTS トークンを返す。
 */
exports.ttsToken = function (req, res) {
    context.ttsAuth.getToken(function (err, token) {
        if (err) {
            console.log('Error retrieving token: ', err);
            res.status(500).send('Error retrieving token');
        } else {
            res.send(token);
        }
    });
};

var getTimings = Promise.resolve([]);

/**
 * テキストを読み上げる。
 */
exports.synthesize = function(req, res) {

  // create an audio stream
  var audioStream = context.tts.synthesize({
    text: req.query.text,
    accept: req.headers.accept // let the client's browser choose what format the audio is sent in
  });

  // send the audio stream to the speech to text service and extract word timings from the results
  getTimings = new Promise(function(resolve, reject) {
    stt.recognize({
      audio: audioStream,
      timestamps: true,
      content_type: 'audio/ogg; codec=opus' // todo: set this pragmatically based on audio stream's content type
    }, function(err, data) {
      console.log(err, data);
      if (err) {
        return reject(err);
      }
      var wordTimings = data.results.reduce(function(prev, result) {
        return prev.concat(result.alternatives[0].timestamps)
      }, []);
      resolve(wordTimings);
    });
  });

  // also send the audio stream to the client for playback
  audioStream.pipe(res);

  // you could additionally pipe the audio to a file if you wanted to save it for later
  // audioStream.pipe(fs.createWriteStream('./my-audio-fille.{wav|ogg|flac}'));
};

/**
 * Word Timing
 */
exports.word-timing = function(req, res) {
  getTimings.then(function(wordTimings) {
    res.json(wordTimings);
  }).catch(function(err) {
    res.status(500).send(err.message);
  });
};

/**
 * Conversationサービスと会話する。
 */
exports.chat = function (req, res) {
    context.conversation.message({
        workspace_id: context.workspaceId,
        input: { 'text': req.body.input_text },
        context: req.body.context
    }, function(err, response) {
        if (err) {
            console.log('Error: ', err);
        } else {
            res.send({
                'output_text': response.output.text,
                'context': response.context
            });
        }
    });
};

